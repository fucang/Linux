/************************************************************************* 
    > File Name: epoll.c 
    > Author: fucang_zxx 
    > Mail: fucang_zxx@163.com  
    > Created Time: Tue 02 Aug 2016 01:21:26 PM CST 
 ************************************************************************/  
  
#include <stdio.h>  
#include <stdlib.h>  
#include <string.h>  
#include <unistd.h>  
#include <sys/socket.h>  
#include <sys/types.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>  
#include <sys/epoll.h>  
  
//创建监听套接字  
int statup(char* _ip, int _port)  
{  
    int sock = socket(AF_INET, SOCK_STREAM, 0);  
    if(sock < 0)  
    {  
        perror("socket");  
        exit(3);  
    }  
    struct sockaddr_in local;  
    local.sin_family = AF_INET;  
    local.sin_port = htons(_port);  
    local.sin_addr.s_addr = inet_addr(_ip);  
  
    if(bind(sock, (struct sockaddr*)&local, sizeof(local)) < 0)  
    {  
        perror("bind");  
        exit(4);  
    }  
  
    if(listen(sock, 5) < 0)  
    {  
        perror("listen");  
        exit(5);  
    }  
  
    return sock;  
}  
  
int main(int argc, char* argv[])  
{  
    if(argc != 3)  
    {  
        printf("Usage#: %s [ip] [port]\n", argv[0]);  
        exit(1);  
    }  
  
    int listen_sock = statup(argv[1], atoi(argv[2]));  
  
    //创建事件表  
    int epfd = epoll_create(128);  
    if(epfd < 0)  
    {  
        perror("epoll_create");  
        exit(2);  
    }  
      
    struct epoll_event event;  
  
    event.events = EPOLLIN;  
    event.data.fd = listen_sock;  
  
    //往事件表中增加事件  
    epoll_ctl(epfd, EPOLL_CTL_ADD, listen_sock, &event);  
  
    struct epoll_event fd_events[128];  
    int size = sizeof(fd_events)/sizeof(fd_events[0]);  
    int i = 0;  
    for(i = 0; i < size; ++i)  
    {  
        fd_events[i].events = 0;  
        fd_events[i].data.fd = -1;  
    }  
  
    int nums = 0;  
  
    int timeout = 5000;  
  
    int done = 0;  
  
    while(!done)  
    {  
        //返回就绪的文件的个数  
        nums = epoll_wait(epfd, fd_events, size, timeout);  
        switch(nums)  
        {  
            case 0:  
                printf("timeout...\n");  
                break;  
            case -1:  
                perror("epoll_wait");  
                break;  
            default:  
                {  
                    for(i = 0; i < nums; ++i)  
                    {  
                        int fd = fd_events[i].data.fd;  
                        if( (fd == listen_sock)  && (fd_events[i].events & EPOLLIN) )   
                        {  
                            //listen socket  
                            struct sockaddr_in peer;  
                            socklen_t len = sizeof(peer);  
                            int new_sock = accept(listen_sock, (struct sockaddr*)&peer, &len);  
                            if(new_sock < 0)  
                            {  
                                perror("accept");  
                                continue;  
                            }  
                              
                            printf("get a new client, socket-> %s:%d\n", inet_ntoa(peer.sin_addr), ntohs(peer.sin_port));  
                            event.events = EPOLLIN;  
                            event.data.fd = new_sock;  
                            //将new_sock添加进内核事件表  
                            epoll_ctl(epfd, EPOLL_CTL_ADD, new_sock, &event);  
                        }  
                        else  
                        {  
                            //other socket  
                            if(fd_events[i].events & EPOLLIN)  
                            {  
                                char buf[1024];  
                                memset(buf, '\0', sizeof(buf));  
                                //文件描述符为fd的文件就绪  
                                ssize_t _s = recv(fd, buf, sizeof(buf) - 1, 0);  
                                if(_s > 0)  
                                {  
                                    buf[_s] = '\0';  
                                    printf("client#: %s\n", buf);  
                                    event.events = EPOLLOUT;//将fd所感兴趣的事件改为写  
                                    epoll_ctl(epfd, EPOLL_CTL_MOD, fd, &event);  
                                }  
                                else if(_s == 0)  
                                {  
                                    printf("client close...\n");  
                                    epoll_ctl(epfd, EPOLL_CTL_DEL, fd, NULL);  
                                    close(fd);  
                                }  
                                else  
                                {  
                                    perror("recv");  
                                    continue;  
                                }  
                            }  
                            else if(fd_events[i].events & EPOLLOUT)  
                            {  
                                const char *msg = "HTTP/1.1 200 OK\r\n\r\n<html><h1>hello fucang = =|| </h1></html>\r\n";  
                                send(fd, msg, strlen(msg), 0);  
                                epoll_ctl(epfd, EPOLL_CTL_DEL, fd, NULL);  
                                close(fd);  
                            }  
                            else  
                            {   }  
                        }  
                    }  
                }  
                break;  
        }  
    }  
  
    return 0;  
}  
